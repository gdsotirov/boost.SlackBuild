#!/bin/sh
#
# Slackware build script for Boost C++ libraries and tools
# Based on the Slackware Build script by Eric Hameleers <alien@slackware.com>
# Based on scripts from Gentoo and Debian
# Copyright (C) 2007-2011 Georgi D. Sotirov <gdsotirov@dir.bg>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
# 
# $Id: boost.SlackBuild,v 1.19 2011/11/16 21:09:24 gsotirov Exp $
#

. ../../slack-package.conf

NAME=boost
VER_MAJ=1
VER_MIN=48
VER_PAT=0
VERSION="$VER_MAJ.$VER_MIN.$VER_PAT"
VERSTR=${VERSION//./_}
BUILD=${BUILD:-1}

SLKCXXFLAGS=`echo $SLKCFLAGS | sed s/\-O[123s]//`
GCC_VERSION=$(gcc --version | head -1 | awk '{ print $3 }')
GCC_MAJMIN=$(gcc --version | head -1 | awk '{print $3}' | awk -F'.' '{print $1 "" $2}')
PYTHON_VERSION=$(python -c 'import sys; print sys.version[:3]')

TMP=${TMP:-/tmp}
CWD=${CWD:-`pwd`}
PKG_DIR=${PKG_DIR:-/tmp}

if [ ! -e $TMP ]; then
  mkdir -p $TMP # location to build the source
fi

SRC=$TMP/${NAME}_${VERSTR}
if [ -e $SRC -a -d $SRC ]; then
  echo "Source directory '$SRC' already exists! Plaese, move it or remove it."
  exit 1
fi

PKG=$TMP/package-$NAME
if [ -e $PKG -a -d $PKG ]; then
  echo "Package creation directory '$PKG' already exists! Please, move it or remove it."
  exit 2
fi
mkdir -p $PKG

# Extract the source
cd $TMP
tar -xvf $CWD/${NAME}_${VERSTR}.tar.bz2
cd $SRC
fix_source

# Apply version specific patches (hot fixes)
# see http://svn.boost.org/trac/boost/wiki/ReleasePractices/HotFixes
# No hotfixes for this release yet

# Configure by writing a specific user config
cat > "$SRC/user-config.jam" << __EOF__ 
# Define build variant
variant slackbuild : release : <optimization>speed <debug-symbols>off ;

# Define toolset
using gcc : ${GCC_VERSION} : ${ARCH}-slackware-linux-g++ : <cxxflags>"${SLKCXXFLAGS} -fno-strict-aliasing" ;

# Define Python
#using python : ${PYTHON_VERSION} : /usr ;

# Define MPI
using mpi ;

__EOF__

# Build b2 (old bjam) first
echo -e "\n\nStep 1 of 5: Build b2\n\n"
CFLAGS="$SLKCFLAGS -fno-strict-aliasing" \
./bootstrap.sh --prefix=/usr \
               --with-icu \
               --with-toolset=gcc || exit $?

bjam="$SRC/b2"
if [ ! -e $bjam ]; then
  echo "Aborting. Can't use b2 executable in '$bjam'"
  exit 1
fi

MYJAM="$bjam -q -d2 -j4 --user-config=$SRC/user-config.jam"

# Build
echo -e "\n\nStep 2 of 5: Build libraries\n\n"
cd $SRC
$MYJAM -2 \
  slackbuild \
  "-sHAVE_ICU=1" \
  --layout=versioned \
  link=shared \
  threading=single,multi \
  runtime-link=shared \
  stage || exit $?

echo -e "\n\nStep 3 of 5: Build tools\n\n"
cd $SRC/tools
$MYJAM \
  slackbuild \
  "-sHAVE_ICU=1" || exit $?

# Install
echo -e "\n\nStep 4 of 5: Install & prepare\n\n"
cd $SRC
$MYJAM \
  slackbuild \
  "-sHAVE_ICU=1" \
  --prefix="$PKG/usr" \
  --libdir="$PKG/usr/lib${LIBDIRSUFFIX}" \
  --layout=versioned \
  link=shared \
  threading=single,multi \
  runtime-link=shared \
  install || exit $?

# Additional installation steps
PYTHON_SITEDIR=$PKG/usr/lib${LIBDIRSUFFIX}/python$PYTHON_VERSION/site-packages
BOOST_SITEDIR=$PYTHON_SITEDIR/${NAME}_${VER_MAJ}_${VER_MIN}_${VER_PAT}
#  - Install mpi
install -m 755 -d $BOOST_SITEDIR
mv $PKG/usr/lib${LIBDIRSUFFIX}/mpi.so $BOOST_SITEDIR/mpi.so
touch $BOOST_SITEDIR/__init__.py

#  - Install pyste
cd $SRC/libs/python/pyste/install
python setup.py install --no-compile --prefix=$PKG/usr --install-lib=$PYTHON_SITEDIR || exit $?

#  - Install b2 and bcp binaries
install -m 755 -d $PKG/usr/bin
install -m 755 $SRC/dist/bin/bcp $PKG/usr/bin/bcp
install -m 755 $bjam $PKG/usr/bin/b2

#  - Fix headers location and make sym link
mv $PKG/usr/include/${NAME}-${VER_MAJ}_${VER_MIN}/${NAME} $PKG/usr/include/${NAME}-${VER_MAJ}.${VER_MIN}
rm -rf $PKG/usr/include/${NAME}-${VER_MAJ}_${VER_MIN}
( cd $PKG/usr/include
  ln -s ${NAME}-${VER_MAJ}.${VER_MIN} ${NAME} )

#  - Rename libraries and create sym links
cd $PKG/usr/lib${LIBDIRSUFFIX}
rm -f *.a
rm -f `find . -type l`
for lib in `ls *.so.*`; do
  mv $lib `echo $lib | sed s/-gcc${GCC_MAJMIN}// | sed s/-${VER_MAJ}_${VER_MIN}//`
done
for lib in `ls *.so.$VERSION`; do
  so_lib=$(echo $lib | sed s/.$VERSION//)
  ln -s $lib $so_lib.$VER_MAJ.$VER_MIN
  ln -s $lib $so_lib.$VER_MAJ
  ln -s $lib $so_lib
done

# Prepare package
cd $PKG
bin_perms $PKG
( cd $PKG; strip_bin; strip_lib )
DOCFILES="$DOCFILES LICENSE_1_0.txt"
( cd $SRC; create_docs $PKG $NAME-$VERSION )
( cd $PKG/usr/doc/$NAME-$VERSION; cp LICENSE_1_0.txt COPYING )
# Put README directing to official online site
install -m 755 -d $PKG/usr/doc/$NAME-$VERSION/html
install -m 644 $CWD/README-DOC-HTML $PKG/usr/doc/$NAME-$VERSION/html/README

mkdir -p $PKG/install
install -m 644 $CWD/slack-desc     $PKG/install/slack-desc
install -m 644 $CWD/slack-required $PKG/install/slack-required
install -m 644 $CWD/slack-suggests $PKG/install/slack-suggests

SB_DIR=$PKG/usr/src/slackbuilds/$NAME-$VERSION
mkdir -p $SB_DIR
install -m 644 $CWD/slack-desc       $SB_DIR/slack-desc
install -m 644 $CWD/slack-required   $SB_DIR/slack-required
install -m 644 $CWD/slack-suggests   $SB_DIR/slack-suggests
install -m 644 $CWD/README-DOC-HTML  $SB_DIR/README-DOC-HTML
install -m 644 $CWD/$NAME.SlackBuild $SB_DIR/$NAME.SlackBuild

echo -e "\n\nStep 5 of 5: Package creation\n\n"
cd $PKG
PKGNAME=$NAME-$VERSION-$ARCH-$BUILD$MYIN
makepkg -l y -c n $PKG_DIR/$PKGNAME.txz
cd $PKG_DIR
md5sum $PKGNAME.txz > $PKGNAME.txz.md5
cat $PKG/install/slack-desc > $PKG_DIR/$PKGNAME.txt

if [ "$1" == "--cleanup" ]; then
  rm -r $SRC
  rm -r $PKG
fi

